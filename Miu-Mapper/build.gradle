apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
//apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = 'Miu-Mapper'
buildDir = 'target'

//bootRepackage{
//    enabled = false
//}

buildscript {

    ext {
        springBootVersion = '1.5.4.RELEASE'
        oauth2Version = '2.1.0.RELEASE'
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        jcenter()
    }

    dependencies {
        //classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }

}

repositories {
    mavenCentral()
}

//mybaitis
configurations {
    /*all*.exclude group: "ch.qos.logback"
    all*.exclude module: "log4j-over-slf4j"*/
    mybatisGenerator
}

dependencies {

    // 依赖 core 模块
//    compile project(":common-util")
    compile project(":Miu-Entity")
    //mybatis generator starts
    compile "org.mybatis.generator:mybatis-generator-core:1.3.7"
    compile 'tk.mybatis:mapper-spring-boot-starter:2.0.3'
   /* compile "org.mybatis.generator:mybatis-generator-core:1.3.5"
    compile "tk.mybatis:mapper-spring-boot-starter:1.1.4"*/
    compile "mysql:mysql-connector-java:5.1.42"
    compile "com.github.pagehelper:pagehelper-spring-boot-starter:1.2.3"

    mybatisGenerator(
            "mysql:mysql-connector-java:5.1.42",
            "org.mybatis.generator:mybatis-generator-core:1.3.5",
//            "tk.mybatis:mapper:3.4.3"
            'tk.mybatis:mapper:4.0.3'
    )

}



def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/application.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task generateMybatisSchema << {
    def properties = getDbProperties()
    def mainPath = sourceSets.main.java.srcDirs[0].path
    def resourcePath = sourceSets.main.resources.srcDirs[0].path
    def modelPath = properties.getProperty("packageModel")
    def mapperPath = properties.getProperty("packageMapper")
    //如果Mapper和XML存在创建一个_new目录
    if (file("$mainPath/" + mapperPath.replace('.', '/')).exists()) {
        mapperPath = mapperPath + "_new"
    }
    def sqlMapperPath = properties.getProperty("sqlMapperPackage")
    if (file("$resourcePath/" + sqlMapperPath.replace('.', '/')).exists()) {
        sqlMapperPath = sqlMapperPath + "_new"
    }

    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("spring.datasource.driver-class-name")
    ant.properties['connectionURL'] = properties.getProperty("spring.datasource.url")
    ant.properties['username'] = properties.getProperty("spring.datasource.username")
    ant.properties['password'] = properties.getProperty("spring.datasource.password")
    ant.properties['src_main_java'] = mainPath
    ant.properties['src_main_resources'] = resourcePath
    ant.properties['modelPackage'] = modelPath
    ant.properties['mapperPackage'] = mapperPath
    ant.properties['sqlMapperPackage'] = sqlMapperPath

    /*ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("packageModel")
    ant.properties['mapperPackage'] = properties.getProperty("packageMapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("sqlMapperPackage")*/
    ant.taskdef(
            name: 'schemaGenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.schemaGenerator(overwrite: true,
            configfile: 'src/main/resources/mybatisGeneratorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'username')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}